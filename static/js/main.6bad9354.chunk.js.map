{"version":3,"sources":["components/Gameboard.jsx","components/Dice.jsx","components/Jail.jsx","components/HomeBase.jsx","components/Backgammon.jsx","App.js","index.js"],"names":["topOfGameboardCSS","padding","border","borderRadius","height","topOfGameboardCSSAlt","bottomOfGameboardCSS","bottomOfGameboardCSSAlt","buttonStyle","Gameboard","_ref","gameState","makeMove","confirmMove","whosTurn","react_default","a","createElement","Fragment","className","map","space","id","style","onClick","e","Object","toConsumableArray","Array","count","x","index","disabled","color","slice","reverse","Dice","diceValues","rollDice","diceArray","value","i","push","paddingTop","roll","display","margin","index_es","icon","faDiceOne","size","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","length","Jail","blueJail","redJail","textAlign","HomeBase","blueBase","redBase","Backgammon","state","currentMove","dice","componentDidMount","_callee","regenerator_default","wrap","_context","prev","next","_this","setState","startOfGame","stop","rollValue1","Math","floor","random","rollValue2","prevState","defineProperty","_dice2","event","spaceID","stopPropagation","attemptedSpace","filter","attemptDiceMove","objectSpread","console","log","flag","attemptedSpaceID","currentSpaceID","distance","attemptDiceMoveToBase","piecesBehindCurrentSpace","some","_loop","v","_ret","handleBase","totalBlueCount","checkVictory","totalRedCount","alert","_this2","this","Gameboard_Gameboard","React","Component","App","components_Backgammon","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6bad9354.chunk.js","sourcesContent":["import React from \"react\";\nimport './Gameboard.css'\n\nlet topOfGameboardCSS = {\n  padding: '5px',\n  border: \"solid 3px #212529\",\n  borderRadius: \"0 0 50px 50px\",\n  height: \"45vh\"\n};\nlet topOfGameboardCSSAlt = {\n  padding: '5px',\n  border: \"solid 3px #007bff\",\n  borderRadius: \"0 0 50px 50px\",\n  height: \"45vh\"\n};\n\nlet bottomOfGameboardCSS = {\n  padding: '5px',\n  border: \"solid 3px #212529\",\n  borderRadius: \"50px 50px 0 0\",\n  height: \"45vh\"\n};\n\nlet bottomOfGameboardCSSAlt = {\n  padding: '5px',\n  border: \"solid 3px #dc3545\",\n  borderRadius: \"50px 50px 0 0\",\n  height: \"45vh\"\n};\n\nlet buttonStyle = {\n  borderRadius: '15px',\n  border: \"solid 3px #000000\"\n}\n\n\nexport default function Gameboard({ gameState, makeMove, confirmMove, whosTurn}) {\n  return (\n    <>\n      <div className=\"row\">\n        {gameState.map(space => {\n          if (space.id > 12) {\n            return (\n              <div\n                className=\"col-1 d-flex flex-column\"\n                style={space.id < 19 ? topOfGameboardCSS : topOfGameboardCSSAlt}\n                onClick={(e) => confirmMove(e, space.id)}\n              >\n                {[...Array(space.count)].map((x, index) => {\n                  return (\n                    <button style={ buttonStyle } disabled={whosTurn === space.color ? false : true} onClick={(e) => makeMove(e, space.id)} className={space.color === 1 ? \"btn btn-sm btn-primary\" : \"btn btn-sm btn-danger\"}>\n                      <br />\n                    </button>\n                  )\n                })}\n              </div>\n            );\n          }\n          return;\n        })}\n      </div>\n      <hr />\n      <div className=\"row\">\n        {gameState.slice(0).reverse().map(space => {\n          if (space.id < 13) {\n            return (\n              <div\n                className=\"col-1 d-flex flex-column-reverse\"\n                style={space.id > 6 ? bottomOfGameboardCSS : bottomOfGameboardCSSAlt}\n                onClick={(e) => confirmMove(e, space.id)}\n              >\n                {[...Array(space.count)].map((x, index) => {\n                  return (\n                    <button style={ buttonStyle } disabled={whosTurn === space.color ? false : true} onClick={(e) => makeMove(e, space.id)} className={space.color === 1 ? \"btn btn-sm btn-primary\" : \"btn btn-sm btn-danger\"}>\n                      <br />\n                    </button>\n                  )\n                })}\n              </div>\n            )\n          }\n        })}\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDiceOne, faDiceTwo, faDiceThree, faDiceFour, faDiceFive, faDiceSix } from '@fortawesome/free-solid-svg-icons'\n\n\n\nexport default function Dice({ diceValues, rollDice, whosTurn }) {\n  let diceArray = []\n  for (let value in diceValues) {\n    for (let i = 0; i < diceValues[value]; i++) {\n      diceArray.push(value)\n    }\n  }\n\n  return (\n    <div style={{ height: \"50vh\" }}>\n      <h2 style={whosTurn === 1 ? { color: '#007bff', paddingTop: '25px' } : { color: '#dc3545', paddingTop: '25px' }}>{whosTurn === 1 ? \"Blue's Turn\" : \"Red's Turn\"}</h2>\n\n      <button className={whosTurn === 1 ? \"align-self-end btn btn-lg btn-danger btn-block\" : \"align-self-end btn btn-lg btn-primary btn-block\"} onClick={() => rollDice()}>\n        Roll the Dice!\n      </button>\n      {diceArray.map(roll => {\n        return (\n          <div style={{ display: 'inline', margin: \"5px\" }}>\n            {roll == 1 ? <FontAwesomeIcon icon={faDiceOne} size=\"5x\" /> : null}\n            {roll == 2 ? <FontAwesomeIcon icon={faDiceTwo} size=\"5x\" /> : null}\n            {roll == 3 ? <FontAwesomeIcon icon={faDiceThree} size=\"5x\" /> : null}\n            {roll == 4 ? <FontAwesomeIcon icon={faDiceFour} size=\"5x\" /> : null}\n            {roll == 5 ? <FontAwesomeIcon icon={faDiceFive} size=\"5x\" /> : null}\n            {roll == 6 ? <FontAwesomeIcon icon={faDiceSix} size=\"5x\" /> : null}\n          </div>\n        )\n      })}\n      <h1>{diceArray.length === 0 ? \"Next Turn\" : \"\"}</h1>\n      <hr className={{}} />\n\n    </div>\n  )\n\n\n}\n","import React from 'react'\n\nlet buttonStyle = {\n  borderRadius: '15px',\n  border: \"solid 3px #000000\"\n}\n\nexport default function Jail({ blueJail, redJail, whosTurn, makeMove }) {\n\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\" style={{ border: \"solid 3px #212529\", textAlign: \"center\" }}>\n            <h4 style={{ color: '#212529' }}><u>Jail</u></h4>\n            {[...Array(blueJail)].map(() => {\n              return (\n                <button style={ buttonStyle } className=\"btn btn-lg btn-primary\" disabled={whosTurn === 2 ? true : false} onClick={(e) => makeMove(e, 0)}>\n                  <br />\n                </button>\n              )\n            })}\n\n            {[...Array(redJail)].map(() => {\n              return (\n                <button style={ buttonStyle} className=\"btn btn-lg btn-danger\" disabled={whosTurn === 1 ? true : false} onClick={(e) => makeMove(e, 0)}>\n                  <br />\n                </button>\n              )\n            })}\n          </div>\n\n        </div>\n      </div>\n    </div>\n  )\n\n}\n","import React from 'react'\n\nlet buttonStyle = {\n  borderRadius: '15px',\n  border: \"solid 3px #000000\"\n}\n\nexport default function HomeBase({ blueBase, redBase }) {\n  return (\n    <>\n    {[...Array(blueBase)].map(() => {\n      return (\n        <button style={ buttonStyle } className=\"btn btn-sm btn-primary\" disabled>\n          <br />\n        </button>\n      )\n    })}\n    <br />\n    {[...Array(redBase)].map(() => {\n      return (\n        <button style={ buttonStyle } className=\"btn btn-sm btn-danger\" disabled>\n          <br />\n        </button>\n      )\n    })}\n  </>\n  )\n}\n","import React from \"react\";\nimport Gameboard from \"./Gameboard\";\nimport Dice from \"./Dice\";\nimport Jail from \"./Jail\";\nimport HomeBase from \"./HomeBase\"\n\nclass Backgammon extends React.Component {\n  state = {\n    gameState: [],\n    whosTurn: 1,\n    currentMove: 0,\n    blueJail: 0,\n    redJail: 0,\n    blueBase: 0,\n    redBase: 0,\n    dice: {}\n  };\n\n  componentDidMount = async () => {\n    this.setState({\n      gameState: [\n        {\n          id: 1,\n          count: 2,\n          color: 1\n        },\n        {\n          id: 2,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 3,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 4,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 5,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 6,\n          count: 5,\n          color: 2\n        },\n        {\n          id: 7,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 8,\n          count: 3,\n          color: 2\n        },\n        {\n          id: 9,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 10,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 11,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 12,\n          count: 5,\n          color: 1\n        },\n        {\n          id: 13,\n          count: 5,\n          color: 2\n        },\n        {\n          id: 14,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 15,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 16,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 17,\n          count: 3,\n          color: 1\n        },\n        {\n          id: 18,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 19,\n          count: 5,\n          color: 1\n        },\n        {\n          id: 20,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 21,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 22,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 23,\n          count: 0,\n          color: 0\n        },\n        {\n          id: 24,\n          count: 2,\n          color: 2\n        }\n      ]\n    });\n    this.rollDice();\n    this.startOfGame();\n  };\n\n  rollDice = () => {\n    let rollValue1 = Math.floor(Math.random() * 6) + 1;\n    let rollValue2 = Math.floor(Math.random() * 6) + 1;\n    if (rollValue1 === rollValue2) {\n      this.setState(prevState => ({\n        dice: {\n          [rollValue1]: 4\n        },\n        whosTurn: prevState.whosTurn === 1 ? 2 : 1,\n        currentMove: 0\n      }))\n    } else {\n      this.setState(prevState => ({\n        dice: {\n          [rollValue1]: 1,\n          [rollValue2]: 1\n        },\n        whosTurn: prevState.whosTurn === 1 ? 2 : 1,\n        currentMove: 0\n      }))\n    }\n  };\n\n  startOfGame = () => {\n    if (Math.floor(Math.random() * 2) + 1 === 1) {\n      this.setState({\n        whosTurn: 1\n      });\n    } else {\n      this.setState({\n        whosTurn: 2\n      });\n    }\n  };\n\n  makeMove = (event, spaceID) => {\n    event.stopPropagation()\n    if (this.state.whosTurn === 1) {\n      if (this.state.blueJail > 0) {\n        this.setState({\n          currentMove: 0\n        })\n      } else {\n        this.setState({\n          currentMove: spaceID\n        })\n      }\n    } else if (this.state.whosTurn === 2) {\n      if (this.state.redJail > 0) {\n        this.setState({\n          currentMove: 0\n        })\n      } else {\n        this.setState({\n          currentMove: spaceID\n        })\n      }\n    }\n\n  }\n\n  confirmMove = (event, spaceID) => {\n    event.stopPropagation()\n\n    if (this.state.currentMove !== 0) {\n      // has clicked a tile first\n\n      // gather new space data\n      let attemptedSpace = this.state.gameState.filter(space => space.id === spaceID)[0]\n\n      if ((attemptedSpace.color === this.state.whosTurn || attemptedSpace.color === 0) && !(this.state.currentMove === attemptedSpace.id)) {\n        // has selected a space with same color or empty, and it is not the same space as the original tile\n        if (this.attemptDiceMove(attemptedSpace.id, this.state.currentMove)) {\n          // check if the move lines up with the dice roll\n          this.setState(prevState => ({\n            gameState: prevState.gameState.map(space => {\n              if (space.id === this.state.currentMove) {\n                // remove tile from current location\n                return {\n                  ...space,\n                  count: space.count - 1,\n                  color: (space.count === 1 ? 0 : space.color)\n                };\n              } else if (space.id === attemptedSpace.id) {\n                // add one tile to new location\n                return {\n                  ...space,\n                  count: space.count + 1,\n                  color: this.state.whosTurn\n                };\n              } else {\n                // return all other tiles not affected\n                return {\n                  ...space\n                };\n              }\n            }),\n            currentMove: 0\n          }));\n        }\n      } else if (attemptedSpace.color !== this.state.whosTurn) {\n        if (attemptedSpace.count === 1 && this.attemptDiceMove(attemptedSpace.id, this.state.currentMove)) {\n\n          // send enemy to jail\n          this.setState(prevState => ({\n            gameState: prevState.gameState.map(space => {\n              if (space.id === this.state.currentMove) {\n                // remove tile from current location\n                return {\n                  ...space,\n                  count: space.count - 1,\n                  color: (space.count === 1 ? 0 : space.color)\n                };\n              } else if (space.id === attemptedSpace.id) {\n                // other piece is sent to jail, just replace single tile color\n                return {\n                  ...space,\n                  color: this.state.whosTurn\n                };\n              } else {\n                // return all other tiles not affected\n                return {\n                  ...space\n                };\n              }\n            }),\n            currentMove: 0,\n            blueJail: (attemptedSpace.color === 1 ? prevState.blueJail + 1 : prevState.blueJail),\n            redJail: (attemptedSpace.color === 2 ? prevState.redJail + 1 : prevState.redJail)\n          }));\n        }\n      } else {\n        console.log(\"else\")\n      }\n    } else {\n      //tile is in jail\n      let flag = false\n      if (this.state.whosTurn === 1) {\n        if (this.state.blueJail > 0) {\n          flag = true\n        }\n      } else if (this.state.whosTurn === 2) {\n        if (this.state.redJail > 0) {\n          flag = true\n        }\n      }\n\n      let attemptedSpace = this.state.gameState.filter(space => space.id === spaceID)[0]\n      if ((attemptedSpace.color === this.state.whosTurn || attemptedSpace.color === 0) && flag) {\n        // tile is attempting to leave jail because jail flag is true\n        if (this.attemptDiceMove(attemptedSpace.id, (this.state.whosTurn === 1 ? 0 : 25))) {\n\n          this.setState(prevState => ({\n            redJail: prevState.whosTurn === 1 ? prevState.redJail : prevState.redJail - 1,\n            blueJail: prevState.whosTurn === 2 ? prevState.blueJail : prevState.blueJail - 1,\n            gameState: prevState.gameState.map(space => {\n              if (space.id === attemptedSpace.id) {\n                // add one tile to new location\n                return {\n                  ...space,\n                  count: space.count + 1,\n                  color: this.state.whosTurn\n                };\n              } else {\n                // return all other tiles not affected\n                return {\n                  ...space\n                };\n              }\n            }),\n            currentMove: 0\n          }));\n        }\n      } else if (attemptedSpace.color !== this.state.whosTurn) {\n        if (attemptedSpace.count === 1 && this.attemptDiceMove(attemptedSpace.id, (this.state.whosTurn === 1 ? 0 : 25))) {\n\n          // send enemy to jail while leaving jail\n          this.setState(prevState => ({\n            gameState: prevState.gameState.map(space => {\n              if (space.id === this.state.currentMove) {\n                // remove tile from current location\n                return {\n                  ...space,\n                  count: space.count - 1,\n                  color: (space.count === 1 ? 0 : space.color)\n                };\n              } else if (space.id === attemptedSpace.id) {\n                // other piece is sent to jail, just replace single tile color\n                return {\n                  ...space,\n                  color: this.state.whosTurn\n                };\n              } else {\n                // return all other tiles not affected\n                return {\n                  ...space\n                };\n              }\n            }),\n            currentMove: 0,\n            blueJail: (attemptedSpace.color === 1 ? prevState.blueJail + 1 : prevState.blueJail - 1),\n            redJail: (attemptedSpace.color === 2 ? prevState.redJail + 1 : prevState.redJail - 1)\n          }));\n        }\n      }\n    }\n  }; //confirm move\n\n  attemptDiceMove = (attemptedSpaceID, currentSpaceID) => {\n    console.log('attemptDiceMove')\n    if (this.state.whosTurn === 1) {\n      //blue, moves with increasing space\n      let distance = attemptedSpaceID - currentSpaceID;\n      console.log(distance)\n      if (this.state.dice[distance] > 0) {\n        //checks if the distance between spaces is in the dice values we have in state\n        this.setState(prevState => ({\n          dice: {\n            ...prevState.dice,\n            [distance]: prevState.dice[distance] - 1\n          }\n        }))\n        return true\n      }\n      else {\n        return false\n      }\n    } else if (this.state.whosTurn === 2) {\n      ///red, moves with decreasing space\n      let distance = currentSpaceID - attemptedSpaceID;\n      if (this.state.dice[distance] > 0) {\n        //checks if the distance between spaces is in the dice values we have in state\n        this.setState(prevState => ({\n          dice: {\n            ...prevState.dice,\n            [distance]: prevState.dice[distance] - 1\n          }\n        }))\n        return true\n      }\n      else {\n        return false\n      }\n    }\n  }\n\n  attemptDiceMoveToBase = () => {\n    let currentSpaceID = this.state.currentMove;\n    if (this.state.whosTurn === 1) {\n      let piecesBehindCurrentSpace = false\n      this.state.gameState.some(space => {\n        if (space.id > 18 && space.id < currentSpaceID) {\n          if (space.color === 1) {\n            return piecesBehindCurrentSpace = true\n          }\n          else return;\n        }\n        else return;\n      })\n      let distance = 25 - currentSpaceID;\n\n      if (this.state.dice[distance] > 0) {\n        // do we have that dice value available\n        this.setState(prevState => ({\n          dice: {\n            ...prevState.dice,\n            [distance]: prevState.dice[distance] - 1\n          }\n        }))\n        return true\n\n      } else if (!piecesBehindCurrentSpace) {\n        console.log(distance)\n        for (var i = distance; i <= 6; i++) {\n          if (this.state.dice[i]) {\n            this.setState(prevState => ({\n              dice: {\n                ...prevState.dice,\n                [i]: prevState.dice[i] - 1\n              }\n            }))\n            return true\n          }\n        }\n        return false\n      }\n\n\n    } else if (this.state.whosTurn === 2) {\n      // red, moves with decreasing space\n      let piecesBehindCurrentSpace = false\n      this.state.gameState.some(space => {\n        if (space.id > currentSpaceID && space.id < 7) {\n          if (space.color === 2) {\n            return piecesBehindCurrentSpace = true\n          }\n          else return;\n        }\n        else return;\n      })\n      let distance = currentSpaceID;\n\n      if (this.state.dice[distance] > 0) {\n        // do we have that dice value available\n        this.setState(prevState => ({\n          dice: {\n            ...prevState.dice,\n            [distance]: prevState.dice[distance] - 1\n          }\n        }))\n        return true\n\n      } else if (!piecesBehindCurrentSpace) {\n        console.log(distance)\n        for (let i = distance; i <= 6; i++) {\n          if (this.state.dice[i]) {\n            this.setState(prevState => ({\n              dice: {\n                ...prevState.dice,\n                [i]: prevState.dice[i] - 1\n              }\n            }))\n            return true\n          }\n        }\n        return false\n      }\n    }\n  }\n\n\n  handleBase = (spaceID) => {\n    console.log('handleBase')\n    if (this.state.currentMove !== 0) {\n      // has clicked a tile first\n      if (this.state.whosTurn === 1) {\n        // blue's turn\n        let totalBlueCount = this.state.blueBase\n        this.state.gameState.map(space => {\n          if (space.id > 18 && space.color === 1) {\n            totalBlueCount += space.count\n          }\n        })\n\n        if (totalBlueCount === 15) {\n          // if all pieces are in homebase, allow a piece to be pulled\n          // do a dice check for blue\n          if (this.attemptDiceMoveToBase()) {\n            this.setState(prevState => ({\n              gameState: prevState.gameState.map(space => {\n                if (space.id === this.state.currentMove) {\n                  // remove tile from current location\n                  return {\n                    ...space,\n                    count: space.count - 1,\n                    color: (space.count === 1 ? 0 : space.color)\n                  }\n                } else {\n                  // return all other tiles not affected\n                  return {\n                    ...space\n                  }\n                }\n              }),\n              currentMove: 0,\n              blueBase: prevState.blueBase + 1\n            }), () => {\n              this.checkVictory()\n            });\n          }\n        }\n      } else if (this.state.whosTurn === 2) {\n        // red's turn\n        let totalRedCount = this.state.redBase\n        this.state.gameState.map(space => {\n          if (space.id < 7 && space.color === 2) {\n            totalRedCount += space.count\n          }\n        })\n        if (totalRedCount === 15) {\n          // if all pieces are in homebase, allow a piece to be pulled\n          // do a dice check\n          if (this.attemptDiceMoveToBase()) {\n            this.setState(prevState => ({\n              gameState: prevState.gameState.map(space => {\n                if (space.id === this.state.currentMove) {\n                  // remove tile from current location\n                  return {\n                    ...space,\n                    count: space.count - 1,\n                    color: (space.count === 1 ? 0 : space.color)\n                  }\n                } else {\n                  // return all other tiles not affected\n                  return {\n                    ...space\n                  }\n                }\n              }),\n              currentMove: 0,\n              redBase: prevState.redBase + 1\n            }), () => {\n              this.checkVictory()\n            });\n          }\n        }\n      }\n    }\n  }\n\n  checkVictory = () => {\n    if (this.state.blueBase === 15) {\n      alert(\"Blue wins!\")\n      // blue(1) wins\n    } else if (this.state.redBase === 15) {\n      alert(\"Red wins!\")\n      // red(2) wins\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <Dice\n              diceValues={this.state.dice}\n              rollDice={this.rollDice}\n              whosTurn={this.state.whosTurn}\n            />\n\n            <Jail\n              blueJail={this.state.blueJail}\n              redJail={this.state.redJail}\n              whosTurn={this.state.whosTurn}\n              makeMove={this.makeMove}\n            />\n          </div>\n          <div className=\"col-8\">\n            <Gameboard\n              gameState={this.state.gameState}\n              makeMove={this.makeMove}\n              confirmMove={this.confirmMove}\n              whosTurn={this.state.whosTurn}\n            />\n          </div>\n          <div className=\"col-2 d-flex flex-column justify-content-between\">\n            <div>\n              <button style={{height: '10rem'}} disabled={this.state.whosTurn === 2 ? true : false} onClick={() => this.handleBase()} className=\"btn btn-lg btn-primary btn-block\">Blue Base</button>\n            </div>\n            <div>\n              <HomeBase\n                blueBase={this.state.blueBase}\n                redBase={this.state.redBase}\n              />\n            </div>\n\n            <div>\n              <button style={{height: '10rem'}} disabled={this.state.whosTurn === 1 ? true : false} onClick={() => this.handleBase()} className=\"btn btn-lg btn-danger justify-content-end btn-block\">Red Base</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Backgammon;\n","import React from 'react';\nimport Backgammon from './components/Backgammon.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Backgammon />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}